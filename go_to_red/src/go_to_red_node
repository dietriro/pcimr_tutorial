#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Point

from threading import Lock

from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Point

from pcimr_simulation.srv import InitPos

class GoToRedNode():
  def __init__(self):
    # Initialize member variables
    self.sim_lock = Lock()
    rospy.wait_for_service('init_pos')

    # Initialize Publishers
    self.pub_move = rospy.Publisher('/move', String, queue_size=10)


    # Initialize Subscribers
    self.sub_robot_position = rospy.Subscriber('/robot_pos', Point, self.get_position)
    self.sub_scan = rospy.Subscriber('/scan', LaserScan, self.get_scan)

    # Initialize Services
    self.pos_service = rospy.ServiceProxy('init_pos', InitPos)

    self.position = Point()
    self.victory = False

  def get_position(self, position):
    #  goal = [16, 12]
    if position.x == 16 and position.y == 12:
      self.victory = True
      print('Victory!')
  
  def get_scan(self, scan):
    """
          beams = [[self.pos[0], 0],              # S
                 [0, self.pos[1]],              # W
                 [self.pos[0], self.size_y-1],  # N
                 [self.size_x-1, self.pos[1]]]  # E

                
    """
 
    north_distance = scan.ranges[2]
    east_distance = scan.ranges[3]
    if self.victory or (north_distance < 2 and east_distance < 2):
      return
    if north_distance < 2:
      self.pub_move.publish('E')
    else:
      self.pub_move.publish('N')

  def init_pos(self):
    pass


  def run(self):
    self.pos_service(2,0)
    while not rospy.is_shutdown():
      continue

if __name__ == "__main__":
    rospy.init_node('go_to_red_node')

    go_to_red_nodeo = GoToRedNode()
    go_to_red_nodeo.run()
