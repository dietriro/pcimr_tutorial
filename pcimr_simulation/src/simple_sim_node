#!/usr/bin/env python3

import rospy
import numpy as np
from threading import Lock

from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Point
from pcimr_simulation.srv import InitPos

from robot_sim.discrete_robot_sim import RobotSimulator2D


# An exmaple world for the robot simulator
WORLD = np.array([[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0],
                  [0], [0], [0], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0],
                  [0], [0], [0], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [1], [1], [1], [1], [1],
                  [0], [0], [1], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [1], [0], [0], [0], [0], [0],
                  [0], [0], [1], [0], [0]],
                 [[1], [1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [0], [1], [0], [1], [0], [0], [1], [1], [1],
                  [1], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [1], [0], [1], [0], [1], [1], [1], [1],
                  [1], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [1], [0], [1], [0], [1], [1], [1], [1],
                  [1], [0], [1], [0], [0]],
                 [[1], [1], [0], [1], [1], [0], [0], [0], [1], [0], [0], [0], [1], [0], [1], [0], [1], [0], [1], [1],
                  [0], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [1], [1], [0], [0], [0], [1], [0], [1], [0], [0], [0], [0], [0],
                  [1], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [1], [0], [1], [0], [0], [0], [0], [0],
                  [1], [1], [1], [0], [0]],
                 [[1], [1], [1], [1], [1], [0], [0], [0], [0], [1], [1], [0], [1], [0], [1], [1], [1], [1], [0], [0],
                  [1], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [1], [0], [1], [0], [0], [0], [0], [0], [1], [0],
                  [1], [1], [1], [0], [0]],
                 [[0], [0], [0], [0], [1], [0], [0], [1], [1], [1], [0], [0], [1], [1], [0], [0], [0], [1], [1], [0],
                  [0], [1], [1], [0], [0]],
                 [[1], [1], [0], [0], [1], [0], [0], [1], [0], [0], [0], [0], [0], [1], [0], [0], [0], [1], [0], [0],
                  [0], [1], [1], [0], [0]],
                 [[0], [1], [0], [0], [1], [0], [0], [1], [0], [1], [1], [1], [0], [1], [0], [1], [1], [1], [0], [1],
                  [1], [1], [1], [0], [0]],
                 [[0], [1], [0], [0], [1], [0], [0], [0], [0], [1], [0], [1], [0], [1], [0], [1], [0], [0], [0], [1],
                  [1], [1], [0], [0], [0]],
                 [[0], [1], [0], [0], [1], [0], [0], [1], [1], [1], [0], [1], [0], [1], [0], [1], [0], [0], [1], [1],
                  [1], [0], [0], [0], [1]],
                 [[0], [1], [0], [0], [1], [0], [0], [1], [0], [0], [0], [1], [1], [1], [0], [1], [0], [0], [1], [1],
                  [0], [0], [0], [1], [1]],
                 [[0], [1], [0], [0], [1], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [1], [0],
                  [0], [0], [1], [1], [0]],
                 [[0], [1], [0], [0], [1], [0], [0], [1], [1], [0], [1], [1], [1], [1], [1], [1], [0], [0], [1], [0],
                  [0], [1], [1], [0], [0]],
                 [[0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0],
                  [1], [1], [0], [0], [0]],
                 [[0], [1], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0],
                  [0], [0], [0], [0], [1]],
                 [[0], [1], [0], [0], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [0],
                  [0], [0], [0], [1], [1]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0],
                  [0], [0], [1], [1], [1]],
                 [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0],
                  [0], [0], [1], [1], [1]]])


class SimpleSimNode:
    """
    A node, capsuling the functionality from the simple robot simulator.
    """

    def __init__(self, num_sensors: int = 4):
        """
        Initializes a SimpleSimNode instance, including initialization of the sim node itself and all
        Publishers/Subscribers.

        @param num_sensors: The number of sensors used for the simulation (4/8).
        """
        # Initialize member variables
        self.sim_lock = Lock()

        # Initialize Publishers
        self.pub_robot_position = rospy.Publisher('/robot_pos', Point, queue_size=10)
        self.pub_scan = rospy.Publisher('/scan', LaserScan, queue_size=10)

        # Initialize Subscribers
        self.sub_move = rospy.Subscriber('/move', String, self.cb_move)

        # Initialize Services
        self.srv_init_pos = rospy.Service('init_pos', InitPos, self.handle_init_pos)

        # Setup messages for publishing
        self.msg_robot_position = Point()
        self.msg_robot_position.z = 0
        self.msg_scan = LaserScan()
        self.msg_scan.header.seq = 0
        self.msg_scan.header.frame_id = 'world'
        self.msg_scan.angle_min = -np.pi
        self.msg_scan.angle_max = np.pi
        self.msg_scan.angle_increment = 2*np.pi/num_sensors
        self.msg_scan.scan_time = 1
        self.msg_scan.range_min = 0
        self.msg_scan.range_max = 30

        # Initialize Robot Simulator
        self.sim = RobotSimulator2D(world=WORLD, pos=(2, 0), num_sensors=4)

    def cb_move(self, msg):
        """
        A callback for retrieving new movement commands for the robot in the simulator.

        @param msg: The message containing the movement command (N, S, E, W).
        """
        self.sim_lock.acquire()
        rospy.logdebug(f'Sending move command to simulator: {msg.data}')
        success = self.sim.move(msg.data)
        if success:
            rospy.loginfo(f'Successfully moved the robot into "{msg.data}".')
        else:
            rospy.logwarn(f'Could not move the robot into "{msg.data}".')
        self.sim_lock.release()

    def handle_init_pos(self, req):
        print('the mother service is breing called')
        rospy.logdebug(f'Initializing position of robot to ({req.x}, {req.y})')
        success = self.sim.init_position((req.x, req.y))
        if not success:
            rospy.logwarn(f'Position initialization to ({req.x}, {req.y}) failed.')
        else:
            rospy.loginfo(f'Successfully initialized position to ({req.x}, {req.y}).')
        return success

    def run(self, rate: float = 1):
        """
        Periodically publishes the information from the simulator on the defined topics.

        @param rate: The rate at which the topics are published.
        """
        while not rospy.is_shutdown():
            # Update message data
            self.msg_robot_position.x = self.sim.pos[0]
            self.msg_robot_position.y = self.sim.pos[1]

            self.msg_scan.ranges = self.sim.sense()

            # Publish messages
            self.pub_robot_position.publish(self.msg_robot_position)
            self.pub_scan.publish(self.msg_scan)

            # Sleep for a while before publishing new messages. 
            if rate:
                rospy.sleep(1/rate)


if __name__ == "__main__":
    rospy.init_node('simple_sim_node')

    simple_sim_node = SimpleSimNode(num_sensors=4)
    simple_sim_node.run(rate=1)
